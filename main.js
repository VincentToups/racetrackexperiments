// Generated by psc-bundle 0.11.6
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var result = [];
      var n = 0;
      for (var i = 0, l = fs.length; i < l; i++) {
        for (var j = 0, k = xs.length; j < k; j++) {
          result[n++] = fs[i](xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["bindArray"] = bindArray;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  exports.random = Math.random;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqNumber = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];                         
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 123, column 3 - line 126, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 114, column 3 - line 117, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["max"] = max;
  exports["min"] = min;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];        
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                                 
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 219, column 1 - line 219, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                      
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 68, column 1 - line 68, column 35: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 127, column 1 - line 127, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromMaybe"] = fromMaybe;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";        

  exports.floor = Math.floor;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Math"];
  exports["floor"] = $foreign.floor;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];      
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 64, column 1 - line 64, column 29: " + [ x.constructor.name ]);
  };
  var floor = function ($14) {
      return unsafeClamp($$Math.floor($14));
  };
  exports["floor"] = floor;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Random"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var v = $foreign.random();
              var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * v + Data_Int.toNumber(low);
              return Data_Int.floor(asNumber);
          };
      };
  };
  exports["randomInt"] = randomInt;
  exports["random"] = $foreign.random;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCoerceEff = function (f) {
    return f;
  };
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["unsafeCoerceEff"] = $foreign.unsafeCoerceEff;
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.newSTRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readSTRef = function (ref) {
    return function () {
      return ref.value;
    };
  };
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["newSTRef"] = $foreign.newSTRef;
  exports["readSTRef"] = $foreign.readSTRef;
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRecEff = function (f) {
      return function (a) {
          var fromDone = function (v) {
              var __unused = function (dictPartial1) {
                  return function ($dollar16) {
                      return $dollar16;
                  };
              };
              return __unused()((function () {
                  if (v instanceof Done) {
                      return v.value0;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Rec.Class line 141, column 28 - line 141, column 42: " + [ v.constructor.name ]);
              })());
          };
          var f$prime = function ($52) {
              return Control_Monad_Eff_Unsafe.unsafeCoerceEff(f($52));
          };
          return function __do() {
              var v = Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(Control_Monad_ST.newSTRef)(f$prime(a))();
              (function () {
                  while (!(function __do() {
                      var v1 = v.value;
                      if (v1 instanceof Loop) {
                          var v2 = f$prime(v1.value0)();
                          var v3 = v.value = v2;
                          return false;
                      };
                      if (v1 instanceof Done) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class line 130, column 5 - line 135, column 26: " + [ v1.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Data_Functor.map(Control_Monad_Eff.functorEff)(fromDone)(Control_Monad_ST.readSTRef(v))();
          };
      };
  }; 
  var monadRecEff = new MonadRec(function () {
      return Control_Monad_Eff.monadEff;
  }, tailRecEff);
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["monadRecEff"] = monadRecEff;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["window"] = $foreign.window;
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
    "use strict";

  exports._requestAnimationFrame = function(fn) {
    return function(window) {
      return function() {
        return window.requestAnimationFrame(fn);
      };
    };
  };
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.Window"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_WebStorage_Types = PS["DOM.WebStorage.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var RequestAnimationFrameId = function (x) {
      return x;
  };
  var requestAnimationFrame = function (fn) {
      return function ($31) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(RequestAnimationFrameId)($foreign._requestAnimationFrame(fn)($31));
      };
  };
  exports["requestAnimationFrame"] = requestAnimationFrame;
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = [];
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicate = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ?
      replicate :
      replicatePolyfill;

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      // jshint maxparams: 2
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };
  exports["Tuple"] = Tuple;
  exports["snd"] = snd;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x, 
              tail: xs
          });
      };
  });
  var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var v = comp(x)(y);
                  if (v instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Array line 475, column 15 - line 480, column 1: " + [ v.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var modifyAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  return updateAt(i)(f(x))(xs);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
          };
      };
  };
  exports["index"] = index;
  exports["mapWithIndex"] = mapWithIndex;
  exports["modifyAt"] = modifyAt;
  exports["sortBy"] = sortBy;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
  exports["updateAt"] = updateAt;
  exports["zip"] = zip;
  exports["cons"] = $foreign.cons;
  exports["length"] = $foreign.length;
  exports["replicate"] = $foreign.replicate;
  exports["snoc"] = $foreign.snoc;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.String"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];
  exports["joinWith"] = $foreign.joinWith;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["fillRect"] = $foreign.fillRect;
  exports["getCanvasHeight"] = $foreign.getCanvasHeight;
  exports["getCanvasWidth"] = $foreign.getCanvasWidth;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["setFillStyle"] = $foreign.setFillStyle;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {var replicate = function (n) {
    return function (v) {
      return Array(n).fill(v)
    }
  }
  exports["replicate"] =       replicate;
})(PS["Matrix"] = PS["Matrix"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Matrix"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var Matrix = function (x) {
      return x;
  };
  var width = function (v) {
      return v.size.x;
  };
  var values = function (v) {
      return v.values;
  };
  var toIndexedArray = function (m) {
      var w = width(m);
      var f = function (ix) {
          return function (a) {
              return {
                  x: ix % w, 
                  y: ix / w | 0, 
                  value: a
              };
          };
      };
      return Data_Array.mapWithIndex(f)(values(m));
  };
  var size = function (v) {
      return v.size;
  };
  var repeat = function (x) {
      return function (y) {
          return function (v) {
              return {
                  size: {
                      x: x, 
                      y: y
                  }, 
                  values: $foreign.replicate(x * y | 0)(v)
              };
          };
      };
  };
  var overValues = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Functor.functorFn)(Matrix)(function (v1) {
                  return {
                      size: v.size, 
                      values: v1
                  };
              }))(f(v.values));
          };
      };
  };
  var height = function (v) {
      return v.size.y;
  };
  var modify = function (x) {
      return function (y) {
          return function ($$new) {
              return function (m) {
                  if (x >= 0 && (y >= 0 && (x < width(m) && y < height(m)))) {
                      return overValues(Data_Maybe.functorMaybe)(Data_Array.modifyAt((y * width(m) | 0) + x | 0)($$new))(m);
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Matrix line 128, column 1 - line 128, column 64: " + [ x.constructor.name, y.constructor.name, $$new.constructor.name, m.constructor.name ]);
              };
          };
      };
  };
  var set = function (x) {
      return function (y) {
          return function ($$new) {
              return modify(x)(y)(Data_Function["const"]($$new));
          };
      };
  };
  var get = function (x) {
      return function (y) {
          return function (m) {
              if (x >= 0 && (y >= 0 && (x < width(m) && y < height(m)))) {
                  return Data_Array.index(values(m))((y * width(m) | 0) + x | 0);
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Matrix line 115, column 1 - line 115, column 42: " + [ x.constructor.name, y.constructor.name, m.constructor.name ]);
          };
      };
  };
  exports["get"] = get;
  exports["height"] = height;
  exports["modify"] = modify;
  exports["repeat"] = repeat;
  exports["set"] = set;
  exports["toIndexedArray"] = toIndexedArray;
  exports["width"] = width;
})(PS["Matrix"] = PS["Matrix"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_HTML_Window = PS["DOM.HTML.Window"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Matrix = PS["Matrix"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Player = (function () {
      function Player(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Player.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Player(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Player;
  })();
  var Up = (function () {
      function Up() {

      };
      Up.value = new Up();
      return Up;
  })();
  var UpRight = (function () {
      function UpRight() {

      };
      UpRight.value = new UpRight();
      return UpRight;
  })();
  var Right = (function () {
      function Right() {

      };
      Right.value = new Right();
      return Right;
  })();
  var DownRight = (function () {
      function DownRight() {

      };
      DownRight.value = new DownRight();
      return DownRight;
  })();
  var Down = (function () {
      function Down() {

      };
      Down.value = new Down();
      return Down;
  })();
  var DownLeft = (function () {
      function DownLeft() {

      };
      DownLeft.value = new DownLeft();
      return DownLeft;
  })();
  var Left = (function () {
      function Left() {

      };
      Left.value = new Left();
      return Left;
  })();
  var UpLeft = (function () {
      function UpLeft() {

      };
      UpLeft.value = new UpLeft();
      return UpLeft;
  })();
  var Coord = (function () {
      function Coord(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Coord.create = function (value0) {
          return function (value1) {
              return new Coord(value0, value1);
          };
      };
      return Coord;
  })();
  var Wall = (function () {
      function Wall() {

      };
      Wall.value = new Wall();
      return Wall;
  })();
  var Space = (function () {
      function Space(value0) {
          this.value0 = value0;
      };
      Space.create = function (value0) {
          return new Space(value0);
      };
      return Space;
  })();
  var wallLocations = function (m) {
      var folder = function (output) {
          return function (c) {
              if (c.value instanceof Space) {
                  return output;
              };
              if (c.value instanceof Wall) {
                  return Data_Array.cons(new Coord(c.x, c.y))(output);
              };
              throw new Error("Failed pattern match at Main line 67, column 25 - line 69, column 58: " + [ c.constructor.name ]);
          };
      };
      var a = Matrix.toIndexedArray(m);
      return Data_Foldable.foldl(Data_Foldable.foldableArray)(folder)([  ])(a);
  };
  var spaceTotal = function (m) {
      var folder = function (output) {
          return function (c) {
              if (c.value instanceof Wall) {
                  return output;
              };
              if (c.value instanceof Space) {
                  return output + c.value.value0;
              };
              throw new Error("Failed pattern match at Main line 75, column 25 - line 77, column 48: " + [ c.constructor.name ]);
          };
      };
      var a = Matrix.toIndexedArray(m);
      return Data_Foldable.foldl(Data_Foldable.foldableArray)(folder)(0.0)(a);
  };
  var spaceMax = function (m) {
      var folder = function (output) {
          return function (c) {
              if (c.value instanceof Wall) {
                  return output;
              };
              if (c.value instanceof Space) {
                  return Data_Ord.max(Data_Ord.ordNumber)(output)(c.value.value0);
              };
              throw new Error("Failed pattern match at Main line 83, column 25 - line 85, column 54: " + [ c.constructor.name ]);
          };
      };
      var a = Matrix.toIndexedArray(m);
      return Data_Foldable.foldl(Data_Foldable.foldableArray)(folder)(0.0)(a);
  };
  var showPlayer = new Data_Show.Show(function (v) {
      return "Player " + (Data_Show.show(Data_Show.showInt)(v.value0) + " ");
  });
  var showDir = new Data_Show.Show(function (v) {
      if (v instanceof Up) {
          return "Up";
      };
      if (v instanceof UpRight) {
          return "UpRight";
      };
      if (v instanceof Right) {
          return "Right";
      };
      if (v instanceof DownRight) {
          return "DownRight";
      };
      if (v instanceof Down) {
          return "Down";
      };
      if (v instanceof DownLeft) {
          return "DownLeft";
      };
      if (v instanceof Left) {
          return "Left";
      };
      if (v instanceof UpLeft) {
          return "UpLeft";
      };
      throw new Error("Failed pattern match at Main line 51, column 1 - line 51, column 29: " + [ v.constructor.name ]);
  });
  var showCoord = new Data_Show.Show(function (v) {
      return "Coord " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + Data_Show.show(Data_Show.showInt)(v.value1)));
  });
  var showCell = new Data_Show.Show(function (v) {
      if (v instanceof Wall) {
          return "W";
      };
      if (v instanceof Space) {
          return Data_Show.show(Data_Show.showNumber)(v.value0);
      };
      throw new Error("Failed pattern match at Main line 32, column 1 - line 32, column 31: " + [ v.constructor.name ]);
  });
  var setCoord = function (m) {
      return function (v) {
          return function (v1) {
              return Matrix.set(v.value0)(v.value1)(v1)(m);
          };
      };
  };
  var selectOne = function (ar) {
      return function __do() {
          var v = Control_Monad_Eff_Random.randomInt(0)(Data_Array.length(ar) - 1 | 0)();
          return Data_Array.index(ar)(v);
      };
  };
  var rightMost = function (v) {
      return function (v1) {
          var $115 = v.value0 > v1.value0;
          if ($115) {
              return Data_Ordering.LT.value;
          };
          var $116 = v.value0 < v1.value0;
          if ($116) {
              return Data_Ordering.GT.value;
          };
          return Data_Ordering.EQ.value;
      };
  };
  var rgbPinch = function (c) {
      return Data_Ord.min(Data_Ord.ordInt)(255)(Data_Ord.max(Data_Ord.ordInt)(0)(c));
  };
  var rectangle = function (x) {
      return function (y) {
          return function (w) {
              return function (h) {
                  return {
                      x: x, 
                      y: y, 
                      w: w, 
                      h: h
                  };
              };
          };
      };
  };
  var randoms = function (n) {
      var randomHelper = function (nh) {
          return function (a) {
              if (nh === 0) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(a);
              };
              return function __do() {
                  var v = Control_Monad_Eff_Random.random();
                  return randomHelper(nh - 1 | 0)(Data_Array.snoc(a)(v))();
              };
          };
      };
      return randomHelper(n)([  ]);
  };
  var randomlyTransformMatrixElements = function (tr) {
      return function (mt) {
          var w = Matrix.width(mt);
          var h = Matrix.height(mt);
          var loop = function (x) {
              return function (y) {
                  return function (m) {
                      var $123 = y === h;
                      if ($123) {
                          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(m);
                      };
                      var x$prime = (x + 1 | 0) % w;
                      var y$prime = (function () {
                          var $124 = x$prime === 0;
                          if ($124) {
                              return y + 1 | 0;
                          };
                          return y;
                      })();
                      var v = Matrix.get(x)(y)(m);
                      if (v instanceof Data_Maybe.Just) {
                          return function __do() {
                              var v1 = tr(x)(y)(v.value0)();
                              var v2 = Matrix.set(x)(y)(v1)(m);
                              if (v2 instanceof Data_Maybe.Just) {
                                  return loop(x$prime)(y$prime)(v2.value0)();
                              };
                              if (v2 instanceof Data_Maybe.Nothing) {
                                  return loop(x$prime)(y$prime)(m)();
                              };
                              throw new Error("Failed pattern match at Main line 356, column 37 - line 358, column 62: " + [ v2.constructor.name ]);
                          };
                      };
                      if (v instanceof Data_Maybe.Nothing) {
                          return loop(x$prime)(y$prime)(m);
                      };
                      throw new Error("Failed pattern match at Main line 354, column 19 - line 359, column 44: " + [ v.constructor.name ]);
                  };
              };
          };
          return loop(0)(0)(mt);
      };
  };
  var randomizeSpaces = function (mt) {
      return function (mn) {
          return function (mx) {
              var f = function (x) {
                  return function (y) {
                      return function (p) {
                          if (p instanceof Wall) {
                              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(p);
                          };
                          if (p instanceof Space) {
                              return function __do() {
                                  var v = Control_Monad_Eff_Random.randomInt(mn)(mx)();
                                  return Space.create(Data_Int.toNumber(v));
                              };
                          };
                          throw new Error("Failed pattern match at Main line 364, column 17 - line 367, column 51: " + [ p.constructor.name ]);
                      };
                  };
              };
              return randomlyTransformMatrixElements(f)(mt);
          };
      };
  };
  var randomNumbers = function (n) {
      var go = function (v) {
          var $134 = v.value0 === 0;
          if ($134) {
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(new Control_Monad_Rec_Class.Done(v.value1));
          };
          return function __do() {
              var v1 = Control_Monad_Eff_Random.random();
              return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v.value0 - 1 | 0, Data_Array.snoc(v.value1)(v1)));
          };
      };
      return Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEff)(go)(new Data_Tuple.Tuple(n, [  ]));
  };
  var player = function (acc) {
      return function (x) {
          return function (y) {
              return function (vx) {
                  return function (vy) {
                      return new Player(acc, x, y, vx, vy);
                  };
              };
          };
      };
  };
  var newPlayer = function (acc) {
      return function (x) {
          return function (y) {
              return new Player(acc, x, y, 0, 0);
          };
      };
  };
  var makeSimulationState = function (m) {
      return function (n) {
          return function (position) {
              return {
                  track: m, 
                  players: Data_Array.replicate(n)(position)
              };
          };
      };
  };
  var lessThanOrdering = function (a) {
      return function (b) {
          var $138 = a < b;
          if ($138) {
              return Data_Ordering.LT.value;
          };
          var $139 = a > b;
          if ($139) {
              return Data_Ordering.GT.value;
          };
          return Data_Ordering.EQ.value;
      };
  };
  var shuffle = function (a) {
      var snds = Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd);
      var byFst = function (v) {
          return function (v1) {
              return lessThanOrdering(v.value0)(v1.value0);
          };
      };
      return function __do() {
          var v = randomNumbers(Data_Array.length(a))();
          return snds(Data_Array.sortBy(byFst)(Data_Array.zip(v)(a)));
      };
  };
  var justOr = function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Nothing) {
              return v1;
          };
          if (v instanceof Data_Maybe.Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Main line 154, column 1 - line 154, column 38: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var setWall = function (m) {
      return function (v) {
          return justOr(Matrix.set(v.value0)(v.value1)(Wall.value)(m))(m);
      };
  };
  var setWalls = function (m) {
      return function (ac) {
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (m$prime) {
              return function (v) {
                  return justOr(Matrix.set(v.value0)(v.value1)(Wall.value)(m$prime))(m$prime);
              };
          })(m)(ac);
      };
  };
  var isWall = function (m) {
      return function (v) {
          var v1 = Matrix.get(v.value0)(v.value1)(m);
          if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof Wall) {
              return true;
          };
          if (v1 instanceof Data_Maybe.Nothing) {
              return true;
          };
          if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof Space) {
              return false;
          };
          throw new Error("Failed pattern match at Main line 164, column 3 - line 167, column 30: " + [ v1.constructor.name ]);
      };
  };
  var isOnTrack = function (m) {
      return function (v) {
          var w = Matrix.width(m);
          var h = Matrix.height(m);
          return v.value0 >= 0 && (v.value0 < w && (v.value1 >= 0 && v.value1 < h));
      };
  };
  var isWalkable = function (m) {
      return function (coord) {
          return !isWall(m)(coord) && isOnTrack(m)(coord);
      };
  };
  var indexToDir = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v === 0) {
              $tco_done = true;
              return Up.value;
          };
          if (v === 1) {
              $tco_done = true;
              return UpRight.value;
          };
          if (v === 2) {
              $tco_done = true;
              return Right.value;
          };
          if (v === 3) {
              $tco_done = true;
              return DownRight.value;
          };
          if (v === 4) {
              $tco_done = true;
              return Down.value;
          };
          if (v === 5) {
              $tco_done = true;
              return DownLeft.value;
          };
          if (v === 6) {
              $tco_done = true;
              return Left.value;
          };
          if (v === 7) {
              $tco_done = true;
              return UpLeft.value;
          };
          $copy_v = v % 8;
          return;
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var randomDirection = function __do() {
      var v = Control_Monad_Eff_Random.randomInt(0)(3)();
      return indexToDir(v);
  };
  var incrCoordinates = function (m) {
      return function (c) {
          var f = function (m$prime) {
              return function (v) {
                  var v1 = Matrix.get(v.value0)(v.value1)(m$prime);
                  if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof Wall) {
                      return m$prime;
                  };
                  if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof Space) {
                      return justOr(Matrix.set(v.value0)(v.value1)(new Space(v1.value0.value0 + 1.0))(m$prime))(m$prime);
                  };
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return m$prime;
                  };
                  throw new Error("Failed pattern match at Main line 294, column 26 - line 297, column 22: " + [ v1.constructor.name ]);
              };
          };
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(f)(m)(c);
      };
  };
  var incrCoord = function (m) {
      return function (v) {
          var v1 = Control_Bind.bind(Data_Maybe.bindMaybe)(Matrix.get(v.value0)(v.value1)(m))(function (v2) {
              if (v2 instanceof Wall) {
                  return new Data_Maybe.Just(m);
              };
              if (v2 instanceof Space) {
                  return Matrix.set(v.value0)(v.value1)(new Space(1.0 + v2.value0))(m);
              };
              throw new Error("Failed pattern match at Main line 303, column 12 - line 305, column 58: " + [ v2.constructor.name ]);
          });
          if (v1 instanceof Data_Maybe.Just) {
              return v1.value0;
          };
          if (v1 instanceof Data_Maybe.Nothing) {
              return m;
          };
          throw new Error("Failed pattern match at Main line 302, column 3 - line 307, column 17: " + [ v1.constructor.name ]);
      };
  };
  var updateBySimulatingOnce = function (next) {
      return function (simState) {
          var loop = function (v) {
              var v1 = Data_Array.length(v.oldPlayers);
              if (v1 === 0) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(new Control_Monad_Rec_Class.Done({
                      track: v.state, 
                      players: v.newPlayers
                  }));
              };
              var v2 = Data_Array.tail(v.oldPlayers);
              if (v2 instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(new Control_Monad_Rec_Class.Done({
                      track: v.state, 
                      players: v.newPlayers
                  }));
              };
              if (v2 instanceof Data_Maybe.Just) {
                  return function __do() {
                      var v3 = next(v.state)(v["oldPlayers"][0])();
                      if (v3 instanceof Data_Maybe.Just) {
                          return new Control_Monad_Rec_Class.Loop({
                              state: incrCoord(v.state)(v3.value0), 
                              oldPlayers: v2.value0, 
                              newPlayers: Data_Array.snoc(v.newPlayers)(v3.value0)
                          });
                      };
                      if (v3 instanceof Data_Maybe.Nothing) {
                          return new Control_Monad_Rec_Class.Loop({
                              state: v.state, 
                              oldPlayers: v2.value0, 
                              newPlayers: Data_Array.snoc(v.newPlayers)(v["oldPlayers"][0])
                          });
                      };
                      throw new Error("Failed pattern match at Main line 263, column 17 - line 265, column 111: " + [ v3.constructor.name ]);
                  };
              };
              throw new Error("Failed pattern match at Main line 259, column 16 - line 265, column 111: " + [ v2.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEff)(loop)({
              state: simState.track, 
              oldPlayers: simState.players, 
              newPlayers: [  ]
          });
      };
  };
  var updateBySimulating = function (next) {
      return function (simState) {
          return function (n) {
              var go = function (v) {
                  if (v.n === 0) {
                      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(new Control_Monad_Rec_Class.Done(v.simState));
                  };
                  return function __do() {
                      var v1 = updateBySimulatingOnce(next)(v.simState)();
                      return new Control_Monad_Rec_Class.Loop({
                          simState: v1, 
                          n: v.n - 1 | 0
                      });
                  };
              };
              return Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEff)(go)({
                  simState: simState, 
                  n: n
              });
          };
      };
  };
  var grey = function (g) {
      return "rgb(" + (Data_String.joinWith(",")(Data_Functor.map(Data_Functor.functorArray)(function ($260) {
          return Data_Show.show(Data_Show.showInt)(rgbPinch($260));
      })([ g, g, g ])) + ")");
  };
  var forEachMatrixElement = function (f) {
      return function (m) {
          var w = Matrix.width(m);
          var h = Matrix.height(m);
          var getAp = function (a) {
              return function (b) {
                  return function (r) {
                      return function (g) {
                          var v = Matrix.get(a)(b)(r);
                          if (v instanceof Data_Maybe.Just) {
                              return g(v.value0);
                          };
                          if (v instanceof Data_Maybe.Nothing) {
                              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                          };
                          throw new Error("Failed pattern match at Main line 384, column 23 - line 386, column 30: " + [ v.constructor.name ]);
                      };
                  };
              };
          };
          var loop = function (x) {
              return function (y) {
                  var $206 = y === h;
                  if ($206) {
                      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                  };
                  return function __do() {
                      getAp(x)(y)(m)(f(x)(y))();
                      var x$prime = (x + 1 | 0) % w;
                      var y$prime = (function () {
                          var $207 = x$prime === 0;
                          if ($207) {
                              return y + 1 | 0;
                          };
                          return y;
                      })();
                      return loop(x$prime)(y$prime)();
                  };
              };
          };
          return loop(0)(0);
      };
  };
  var eqCoord = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.value0 === v1.value0 && v.value1 === v1.value1;
      };
  });
  var emptyTrack = function (w) {
      return function (h) {
          return Matrix.repeat(w)(h)(new Space(0.0));
      };
  };
  var defaultWallLocations = [ new Coord(90, 24), new Coord(49, 24), new Coord(90, 23), new Coord(49, 23), new Coord(90, 22), new Coord(49, 22), new Coord(90, 21), new Coord(74, 21), new Coord(73, 21), new Coord(72, 21), new Coord(71, 21), new Coord(70, 21), new Coord(69, 21), new Coord(68, 21), new Coord(67, 21), new Coord(49, 21), new Coord(35, 21), new Coord(71, 20), new Coord(70, 20), new Coord(69, 20), new Coord(68, 20), new Coord(67, 20), new Coord(66, 20), new Coord(65, 20), new Coord(64, 20), new Coord(49, 20), new Coord(35, 20), new Coord(49, 19), new Coord(35, 19), new Coord(74, 18), new Coord(73, 18), new Coord(72, 18), new Coord(71, 18), new Coord(70, 18), new Coord(69, 18), new Coord(68, 18), new Coord(67, 18), new Coord(49, 18), new Coord(35, 18), new Coord(35, 17), new Coord(5, 17), new Coord(35, 16), new Coord(5, 16), new Coord(35, 15), new Coord(10, 15), new Coord(9, 15), new Coord(8, 15), new Coord(7, 15), new Coord(6, 15), new Coord(5, 15), new Coord(4, 15), new Coord(3, 15), new Coord(67, 14), new Coord(35, 14), new Coord(32, 14), new Coord(5, 14), new Coord(67, 13), new Coord(32, 13), new Coord(29, 13), new Coord(28, 13), new Coord(27, 13), new Coord(26, 13), new Coord(25, 13), new Coord(24, 13), new Coord(23, 13), new Coord(22, 13), new Coord(5, 13), new Coord(67, 12), new Coord(32, 12), new Coord(5, 12), new Coord(99, 11), new Coord(98, 11), new Coord(97, 11), new Coord(67, 11), new Coord(48, 11), new Coord(47, 11), new Coord(46, 11), new Coord(45, 11), new Coord(44, 11), new Coord(43, 11), new Coord(42, 11), new Coord(41, 11), new Coord(32, 11), new Coord(5, 11), new Coord(67, 10), new Coord(32, 10), new Coord(5, 10), new Coord(67, 9), new Coord(32, 9), new Coord(67, 8), new Coord(32, 8), new Coord(67, 7), new Coord(32, 7), new Coord(11, 7), new Coord(11, 6), new Coord(11, 5), new Coord(52, 4), new Coord(11, 4), new Coord(86, 3), new Coord(85, 3), new Coord(84, 3), new Coord(83, 3), new Coord(82, 3), new Coord(81, 3), new Coord(80, 3), new Coord(79, 3), new Coord(52, 3), new Coord(20, 3), new Coord(19, 3), new Coord(18, 3), new Coord(17, 3), new Coord(16, 3), new Coord(15, 3), new Coord(14, 3), new Coord(13, 3), new Coord(12, 3), new Coord(11, 3), new Coord(52, 2), new Coord(35, 2), new Coord(34, 2), new Coord(33, 2), new Coord(32, 2), new Coord(31, 2), new Coord(30, 2), new Coord(29, 2), new Coord(28, 2), new Coord(12, 2), new Coord(11, 2), new Coord(52, 1), new Coord(39, 1), new Coord(38, 1), new Coord(37, 1), new Coord(36, 1), new Coord(35, 1), new Coord(34, 1), new Coord(33, 1), new Coord(32, 1), new Coord(12, 1), new Coord(11, 1), new Coord(52, 0), new Coord(12, 0), new Coord(11, 0) ];
  var defaultTrack = setWalls(emptyTrack(100)(25))(defaultWallLocations);
  var cellToRgb = function (v) {
      return function (v1) {
          if (v instanceof Wall) {
              return "BlueViolet";
          };
          if (v instanceof Space) {
              var g = Data_Int.floor((255.0 * (Data_Int.toNumber(v1) - v.value0)) / Data_Int.toNumber(v1));
              return grey(g);
          };
          throw new Error("Failed pattern match at Main line 95, column 1 - line 95, column 35: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var drawMap = function (theMap) {
      return function (can) {
          return function __do() {
              var v = Graphics_Canvas.getCanvasWidth(can)();
              var v1 = Graphics_Canvas.getCanvasHeight(can)();
              var norm = spaceMax(theMap);
              var mw = Data_Int.toNumber(Matrix.width(theMap));
              var rw = v / mw;
              var mh = Data_Int.toNumber(Matrix.height(theMap));
              var rh = v1 / mh;
              var v2 = Graphics_Canvas.getContext2D(can)();
              var v3 = Graphics_Canvas.setFillStyle("white")(v2)();
              var v4 = Graphics_Canvas.fillRect(v2)(rectangle(0.0)(0.0)(v)(v1))();
              var each = function (x) {
                  return function (y) {
                      return function (v5) {
                          return function __do() {
                              var v6 = Graphics_Canvas.setFillStyle(cellToRgb(v5)(Data_Int.floor(norm)))(v2)();
                              var v7 = Graphics_Canvas.fillRect(v2)(rectangle(Data_Int.toNumber(x) * rw)(Data_Int.toNumber(y) * rh)(rw)(rh))();
                              return Data_Unit.unit;
                          };
                      };
                  };
              };
              return forEachMatrixElement(each)(theMap)();
          };
      };
  };
  var allDirections = [ Up.value, UpRight.value, Right.value, DownRight.value, Down.value, DownLeft.value, Left.value, UpLeft.value ];
  var adjust = function (v) {
      return function (v1) {
          if (v instanceof Up) {
              return new Coord(v1.value0, v1.value1 - 1 | 0);
          };
          if (v instanceof UpRight) {
              return adjust(Up.value)(adjust(Right.value)(v1));
          };
          if (v instanceof Right) {
              return new Coord(v1.value0 + 1 | 0, v1.value1);
          };
          if (v instanceof DownRight) {
              return adjust(Down.value)(adjust(Right.value)(v1));
          };
          if (v instanceof Down) {
              return new Coord(v1.value0, v1.value1 + 1 | 0);
          };
          if (v instanceof DownLeft) {
              return adjust(Down.value)(adjust(Left.value)(v1));
          };
          if (v instanceof Left) {
              return new Coord(v1.value0 - 1 | 0, v1.value1);
          };
          if (v instanceof UpLeft) {
              return adjust(Up.value)(adjust(Left.value)(v1));
          };
          throw new Error("Failed pattern match at Main line 125, column 1 - line 125, column 32: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var wallRun = function ($copy_v) {
      return function ($copy_dir) {
          return function ($copy_v1) {
              return function ($copy_coord) {
                  var $tco_var_v = $copy_v;
                  var $tco_var_dir = $copy_dir;
                  var $tco_var_v1 = $copy_v1;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(v, dir, v1, coord) {
                      if (v1 === 0) {
                          $tco_done = true;
                          return v;
                      };
                      var $234 = isOnTrack(v)(coord);
                      if ($234) {
                          var v2 = setCoord(v)(coord)(Wall.value);
                          if (v2 instanceof Data_Maybe.Just) {
                              $tco_var_v = v2.value0;
                              $tco_var_dir = dir;
                              $tco_var_v1 = v1 - 1 | 0;
                              $copy_coord = adjust(dir)(coord);
                              return;
                          };
                          if (v2 instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return v;
                          };
                          throw new Error("Failed pattern match at Main line 313, column 10 - line 315, column 20: " + [ v2.constructor.name ]);
                      };
                      $tco_done = true;
                      return v;
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_v, $tco_var_dir, $tco_var_v1, $copy_coord);
                  };
                  return $tco_result;
              };
          };
      };
  };
  var randomWalls = function (theMap) {
      return function (nWalls) {
          return function (minLength) {
              return function (maxLength) {
                  if (nWalls === 0) {
                      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(theMap);
                  };
                  return function __do() {
                      var v = randomDirection();
                      var v1 = Control_Monad_Eff_Random.randomInt(minLength)(maxLength)();
                      var v2 = Control_Monad_Eff_Random.randomInt(0)(Matrix.width(theMap) - 1 | 0)();
                      var v3 = Control_Monad_Eff_Random.randomInt(0)(Matrix.height(theMap) - 1 | 0)();
                      return randomWalls(wallRun(theMap)(v)(v1)(new Coord(v2, v3)))(nWalls - 1 | 0)(minLength)(maxLength)();
                  };
              };
          };
      };
  };
  var adjacentWalkables = function (m) {
      return function (directions) {
          return function (coord) {
              var helper = function ($copy_directions$prime) {
                  return function ($copy_output) {
                      var $tco_var_directions$prime = $copy_directions$prime;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(directions$prime, output) {
                          var v = Data_Array.uncons(directions$prime);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return output;
                          };
                          if (v instanceof Data_Maybe.Just) {
                              var coord$prime = adjust(v.value0.head)(coord);
                              var $243 = isWalkable(m)(coord$prime);
                              if ($243) {
                                  $tco_var_directions$prime = v.value0.tail;
                                  $copy_output = Data_Array.snoc(output)(coord$prime);
                                  return;
                              };
                              $tco_var_directions$prime = v.value0.tail;
                              $copy_output = output;
                              return;
                          };
                          throw new Error("Failed pattern match at Main line 176, column 9 - line 182, column 47: " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_directions$prime, $copy_output);
                      };
                      return $tco_result;
                  };
              };
              return helper(directions)([  ]);
          };
      };
  };
  var randomNext = function (m) {
      return function (c) {
          var neighbors = adjacentWalkables(m)(allDirections)(c);
          return selectOne(neighbors);
      };
  };
  var updateBySimulatingRandomMotion = updateBySimulating(randomNext);
  var reachableWalkables = function (m) {
      return function (dirs) {
          return function (start) {
              return function (v) {
                  if (v === 0) {
                      return [  ];
                  };
                  var loop = function ($copy_n$prime) {
                      return function ($copy_positions) {
                          var $tco_var_n$prime = $copy_n$prime;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(n$prime, positions) {
                              var $251 = 0 === n$prime;
                              if ($251) {
                                  $tco_done = true;
                                  return positions;
                              };
                              $tco_var_n$prime = n$prime - 1 | 0;
                              $copy_positions = Control_Bind.bind(Control_Bind.bindArray)(positions)(function (v1) {
                                  return adjacentWalkables(m)(dirs)(v1);
                              });
                              return;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_n$prime, $copy_positions);
                          };
                          return $tco_result;
                      };
                  };
                  return loop(v)([ start ]);
              };
          };
      };
  };
  var rightMostNext = function (m) {
      return function (c) {
          var neighbors = adjacentWalkables(m)(allDirections)(c);
          var v = Data_Array.length(neighbors);
          if (v === 0) {
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Maybe.Nothing.value);
          };
          return function __do() {
              var v1 = shuffle(neighbors)();
              return new Data_Maybe.Just((Data_Array.sortBy(rightMost)(v1))[0]);
          };
      };
  };
  var updateBySimulatingRtRandomMotion = updateBySimulating(rightMostNext);
  var once = function (can) {
      return function (ss) {
          return function (window$prime) {
              return function __do() {
                  var v = updateBySimulatingRtRandomMotion(ss)(1)();
                  drawMap(v.track)(can)();
                  var v1 = DOM_HTML_Window.requestAnimationFrame(once(can)(v)(window$prime))(window$prime)();
                  return Data_Unit.unit;
              };
          };
      };
  };
  var main = function __do() {
      var v = Graphics_Canvas.getCanvasElementById("vis")();
      var simState = makeSimulationState(defaultTrack)(100)(new Coord(0, 0));
      if (v instanceof Data_Maybe.Just) {
          Control_Monad_Eff_Console.log("Got a canvas")();
          var v1 = DOM_HTML.window();
          var v2 = DOM_HTML_Window.requestAnimationFrame(once(v.value0)(simState)(v1))(v1)();
          return Data_Unit.unit;
      };
      if (v instanceof Data_Maybe.Nothing) {
          Control_Monad_Eff_Console.log("Got nothing.")();
          return Data_Unit.unit;
      };
      throw new Error("Failed pattern match at Main line 430, column 3 - line 438, column 12: " + [ v.constructor.name ]);
  };
  exports["Wall"] = Wall;
  exports["Space"] = Space;
  exports["Coord"] = Coord;
  exports["Up"] = Up;
  exports["UpRight"] = UpRight;
  exports["Right"] = Right;
  exports["DownRight"] = DownRight;
  exports["Down"] = Down;
  exports["DownLeft"] = DownLeft;
  exports["Left"] = Left;
  exports["UpLeft"] = UpLeft;
  exports["Player"] = Player;
  exports["adjacentWalkables"] = adjacentWalkables;
  exports["adjust"] = adjust;
  exports["allDirections"] = allDirections;
  exports["cellToRgb"] = cellToRgb;
  exports["defaultTrack"] = defaultTrack;
  exports["defaultWallLocations"] = defaultWallLocations;
  exports["drawMap"] = drawMap;
  exports["emptyTrack"] = emptyTrack;
  exports["forEachMatrixElement"] = forEachMatrixElement;
  exports["grey"] = grey;
  exports["incrCoord"] = incrCoord;
  exports["incrCoordinates"] = incrCoordinates;
  exports["indexToDir"] = indexToDir;
  exports["isOnTrack"] = isOnTrack;
  exports["isWalkable"] = isWalkable;
  exports["isWall"] = isWall;
  exports["justOr"] = justOr;
  exports["lessThanOrdering"] = lessThanOrdering;
  exports["main"] = main;
  exports["makeSimulationState"] = makeSimulationState;
  exports["newPlayer"] = newPlayer;
  exports["once"] = once;
  exports["player"] = player;
  exports["randomDirection"] = randomDirection;
  exports["randomNext"] = randomNext;
  exports["randomNumbers"] = randomNumbers;
  exports["randomWalls"] = randomWalls;
  exports["randomizeSpaces"] = randomizeSpaces;
  exports["randomlyTransformMatrixElements"] = randomlyTransformMatrixElements;
  exports["randoms"] = randoms;
  exports["reachableWalkables"] = reachableWalkables;
  exports["rectangle"] = rectangle;
  exports["rgbPinch"] = rgbPinch;
  exports["rightMost"] = rightMost;
  exports["rightMostNext"] = rightMostNext;
  exports["selectOne"] = selectOne;
  exports["setCoord"] = setCoord;
  exports["setWall"] = setWall;
  exports["setWalls"] = setWalls;
  exports["shuffle"] = shuffle;
  exports["spaceMax"] = spaceMax;
  exports["spaceTotal"] = spaceTotal;
  exports["updateBySimulating"] = updateBySimulating;
  exports["updateBySimulatingOnce"] = updateBySimulatingOnce;
  exports["updateBySimulatingRandomMotion"] = updateBySimulatingRandomMotion;
  exports["updateBySimulatingRtRandomMotion"] = updateBySimulatingRtRandomMotion;
  exports["wallLocations"] = wallLocations;
  exports["wallRun"] = wallRun;
  exports["showCell"] = showCell;
  exports["showCoord"] = showCoord;
  exports["eqCoord"] = eqCoord;
  exports["showDir"] = showDir;
  exports["showPlayer"] = showPlayer;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
